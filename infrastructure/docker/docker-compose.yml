
services:
  nginx:
    image: nginx:1.25-alpine
    container_name: valunds_nginx
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx/site.conf:/etc/nginx/conf.d/default.conf:ro
      - ./frontend/dist:/usr/share/nginx/html:ro
      - ./backend/staticfiles:/app/staticfiles:ro
      - ./backend/media:/app/media:ro
      # Mount SSL certificates (get from Let's Encrypt or one.com)
      - ./secrets/nginx/fullchain.pem:/etc/nginx/certs/fullchain.pem:ro
      - ./secrets/nginx/privkey.pem:/etc/nginx/certs/privkey.pem:ro
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - valunds_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  backend:
    build:
      context: ./backend
      dockerfile: ../infrastructure/docker/Dockerfile
    container_name: valunds_backend
    env_file:
      - ./backend/.env
    restart: unless-stopped
    expose:
      - "8000"
    environment:
      - DJANGO_SETTINGS_MODULE=backend.config.settings
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./backend/media:/app/media
      - ./backend/staticfiles:/app/staticfiles
    healthcheck:
      test: ["CMD-SHELL", "python -c 'import requests; requests.get(\"http://localhost:8000/api/schema/\", timeout=5)'"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    networks:
      - valunds_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  celery_worker:
    build:
      context: ./backend
      dockerfile: ../infrastructure/docker/Dockerfile
    container_name: valunds_celery_worker
    command: celery -A backend.config worker -l info
    env_file:
      - ./backend/.env
    restart: unless-stopped
    environment:
      - DJANGO_SETTINGS_MODULE=backend.config.settings
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
    depends_on:
      - backend
      - redis
      - postgres
    networks:
      - valunds_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  celery_beat:
    build:
      context: ./backend
      dockerfile: ../infrastructure/docker/Dockerfile
    container_name: valunds_celery_beat
    command: celery -A backend.config beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    env_file:
      - ./backend/.env
    restart: unless-stopped
    environment:
      - DJANGO_SETTINGS_MODULE=backend.config.settings
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
    depends_on:
      - backend
      - redis
      - postgres
    networks:
      - valunds_network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  redis:
    image: redis:7-alpine
    container_name: valunds_redis
    restart: unless-stopped
    command: ["redis-server", "--appendonly", "yes", "--requirepass", "${REDIS_PASSWORD}"]
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - valunds_network
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

  postgres:
    image: postgres:17-alpine
    container_name: valunds_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - valunds_network
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  valunds_network:
    driver: bridge
