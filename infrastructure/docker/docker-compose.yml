version: "3.9"

services:
  nginx:
    image: nginx:1.25-alpine
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deploy/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./frontend/dist:/usr/share/nginx/html:ro
      # TLS certs: mount read-only files (or use a proper secret manager)
      - ./secrets/nginx/fullchain.pem:/etc/nginx/certs/fullchain.pem:ro
      - ./secrets/nginx/privkey.pem:/etc/nginx/certs/privkey.pem:ro
    healthcheck:
      test: ["CMD", "curl", "-sf", "http://127.0.0.1/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - internal

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    env_file:
      - ./backend/.env         # keep secrets out of repo; prefer docker secrets or vault
    restart: on-failure
    expose:
      - "8000"
    environment:
      # prefer using DATABASE_URL or secret-mounted credentials in production
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - internal

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    restart: on-failure
    # build in CI and only mount artifacts into nginx in production for smaller runtime surface
    healthcheck:
      test: ["CMD-SHELL", "test -f /usr/share/nginx/html/index.html || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - internal

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: ["redis-server", "--appendonly", "yes", "--protected-mode", "yes"]
    volumes:
      - redisdata:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - internal

  postgres:
    image: postgres:17
    restart: unless-stopped
    environment:
      POSTGRES_USER: myapp
      POSTGRES_DB: myappdb
      # Using a file-backed secret is more secure than putting the password in env vars
      POSTGRES_PASSWORD_FILE: /run/secrets/db_password
    secrets:
      - db_password
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - internal

secrets:
  db_password:
    file: ./secrets/db_password

volumes:
  pgdata:
    driver: local
  redisdata:
    driver: local

networks:
  internal:
    driver: bridge
